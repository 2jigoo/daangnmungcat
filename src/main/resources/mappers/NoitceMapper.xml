<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="daangnmungcat.mapper.NoticeMapper">

	<sql id="selectNoticeSQL">
		SELECT *
		FROM (
			SELECT
				n.id,
				title,
				contents,
				n.regdate,
				notice_YN,
				notice_file,
				writer AS writer_id,
				m.nickname AS writer_nickname,
				hits,
				lag(n.id, 1) over(order by n.id) prev,
				lead(n.id, 1) over(order by n.id) next
			FROM notice n
				LEFT OUTER JOIN member m ON (n.writer = m.id)
		)
	</sql>
	
	<resultMap type="Notice" id="noticeResult">
		<id column="id" property="id"/>
		<result column="title" property="title"/>
		<result column="contents" property="contents"/>
		<result column="regdate" property="regdate"/>
		<result column="notice_YN" property="noticeYn"/>
		<result column="notice_file" property="noticeFile"/>
		<result column="hits" property="hits"/>
		<result column="prev" property="prev"/>
		<result column="next" property="next"/>
		<association column="writer" property="writer" columnPrefix="writer_" resultMap="daangnmungcat.mapper.MemberMapper.memberResult"/>
	</resultMap>
	
	
	<select id="selectNoticeByAllPage" resultMap="noticeResult">
		SELECT a.*
		FROM (SELECT rownum AS rnum, b.*
	  		FROM (
	  			SELECT
	  				n.id,
	  				title,
	  				contents,
	  				n.regdate,
	  				notice_YN,
	  				notice_file,
	  				writer AS writer_id,
	  				m.nickname AS writer_nickname,
	  				hits
  				FROM notice n
  					LEFT OUTER JOIN member m ON (n.writer = m.id)
  				ORDER BY notice_yn desc) b) a
		WHERE a.rnum BETWEEN #{rowStart} AND #{rowEnd}
		ORDER BY a.rnum
	</select>
	
	<!-- <select id="selectNoticeBySearch" parameterType="map" resultMap="noticeResult">
		SELECT a.*
		  FROM (SELECT rownum AS rnum, b.*
		  		FROM (SELECT id, title, contents, regdate, notice_YN, notice_file FROM notice ORDER BY notice_yn desc
		  <where>
		  	<if test="notice.title != null">and title LIKE '%'||#{notice.title}||'%' </if>
		  	<if test="notice.contents != null">and title LIKE '%'||#{notice.contents}||'%' </if>
			<if test="notice.noticeYn != null">and cat_cate = #{notice.noticeYn} </if>
		  </where>) b) a
		 WHERE a.rnum BETWEEN #{cri.rowStart} AND #{cri.rowEnd}
		ORDER BY a.rnum
	</select> -->
	
	
	<select id="listCount" parameterType="map" resultType="int">
		SELECT count(*)
		FROM notice
	</select>
	
	
	<sql id="whereSearchSQL">
		<where>
			<if test="scri.searchType != null" > 
				<if test="scri.searchType eq 'title'">
					and title like '%' || #{scri.keyword} || '%'
				</if>
				<if test="scri.searchType eq 'contents'">
					and contents like '%' || #{scri.keyword} || '%'
				</if>
				<if test="scri.searchType eq 'writer'">
					and m.id like '%' || #{scri.keyword} || '%'
				</if>
				<if test="notice.noticeYn != null and (notice.noticeYn.equalsIgnoreCase('y') || notice.noticeYn.equalsIgnoreCase('n'))">
					and notice_yn = #{notice.noticeYn}
				</if>
			   	<if test="scri.startDate != null and scri.startDate != '' and scri.endDate != null and scri.endDate != ''">
				 	and n.regdate between #{scri.startDate} and #{scri.endDate}
				</if> 
			 </if>
		</where>
	</sql>
	
	<select id="selectNoticeBySearch" resultMap="noticeResult">
		SELECT *
		FROM (
			SELECT rownum AS rnum, a.*
			FROM (
				SELECT
					n.id,
					title,
					contents,
					n.regdate,
					notice_yn,
					notice_file,
					n.writer AS writer_id,
					m.nickname AS writer_nickname
				FROM
					notice n
						LEFT OUTER JOIN member m ON (n.writer = m.id)
				<include refid="whereSearchSQL"/>
				ORDER BY regdate DESC
			) a
		)
		WHERE rnum BETWEEN #{scri.rowStart} AND #{scri.rowEnd}
		ORDER BY rnum
	</select>
	
	<select id="selectNoticeCountBySearch" resultType="int">
		SELECT COUNT(*)
		FROM notice n
			LEFT OUTER JOIN member m ON (n.writer = m.id)
		<include refid="whereSearchSQL"/>
	</select>
	
	<select id="selectNoticeByNo" resultMap="noticeResult" parameterType="int">
		<include refid="selectNoticeSQL"/>
		where id = #{id}
	</select>
	
	<insert id="insertNotice" parameterType="Notice">
		<selectKey keyProperty="id" resultType="int" order="BEFORE">
			SELECT notice_seq.nextval FROM DUAL
		</selectKey>
		insert into notice(id, title, contents, regdate, notice_YN, notice_file, writer)
		values(#{id}, #{title}, #{contents}, sysdate,
			<choose>
				<when test="noticeYn != null and noticeYn.equalsIgnoreCase('y')">'y'</when>
				<otherwise>'n'</otherwise>
			</choose>
			, #{noticeFile}, #{writer.id})
	</insert>
	
	<update id="updateNotice" parameterType="Notice">
		UPDATE notice
		SET title = #{title}, contents = #{contents},
			notice_yn = 
				<choose>
					<when test="noticeYn != null and noticeYn.equalsIgnoreCase('y')">'y'</when>
					<otherwise>'n'</otherwise>
				</choose>
		WHERE id = #{id}
	</update>
	
	<update id="updateNoticeFileName" parameterType="Notice">
		UPDATE notice
		SET notice_file = #{noticeFile}
		WHERE id = #{id}
	</update>
	
	<delete id="deleteNotice" parameterType="Notice">
		DELTE FROM notice
		WHERE id = #{id}
	</delete>


	<select id="selectSimpleNoticeByNo" parameterType="int" resultMap="noticeResult">
		SELECT
			n.id, title, notice_yn, writer as writer_id, m.nickname as writer_nickname, n.regdate, hits
		FROM notice n
			LEFT OUTER JOIN member m  ON (n.writer = m.id)
		WHERE n.id = #{id}
	</select>
	
	<update id="addHits" parameterType="int">
		UPDATE
			notice
		SET hits = hits + 1
		WHERE id = #{id}
	</update>
</mapper>