<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="daangnmungcat.mapper.OrderMapper">

<!-- resultMap -->
	<resultMap type="Order" id="orderRes">
		<id property="id" column="id"></id>
		<result property="member.id" column="mem_id"></result>
		<result property="member.name" column="mem_name"></result>
		<result property="member.email" column="mem_email"></result>
		<result property="member.phone" column="mem_phone"></result>
		<result property="addName" column="address_name"></result>
		<result property="zipcode" column="zipcode"></result>
		<result property="address1" column="address1"></result>
		<result property="address2" column="address2"></result>
		<result property="addPhone1" column="address_phone1"></result>
		<result property="addPhone2" column="address_phone2"></result>
		<result property="addMemo" column="address_memo"></result>
		<result property="totalPrice" column="total_price"></result>
		<result property="usedMileage" column="used_mileage"></result>
		<result property="finalPrice" column="final_price"></result>
		<result property="plusMileage" column="plus_mileage"></result>
		<result property="deliveryPrice" column="delivery_price"></result>
		<result property="trackingNumber" column="tracking_number"></result>
		<result property="shippingDate" column="shipping_date"></result>
		<result property="addDeliveryPrice" column="add_delivery_price"></result>
		<result property="settleCase" column="settle_case"></result>
		<result property="returnPrice" column="return_price"></result>
		<result property="payId" column="pay_id"></result>
		<result property="payDate" column="pay_date"></result>
		<result property="state" column="state"></result>
		<result property="ordercnt" column="order_cnt"></result>
		<result property="misu" column="misu"></result>
		<result property="regDate" column="regdate"></result>
		
		<association property="member" column="mem_id" select="daangnmungcat.mapper.MemberMapper.selectMemberById" fetchType="lazy"/>
	</resultMap>
	
	<resultMap type="Payment" id="kakaoRes">
		<id property="id" column="id"></id>
		<result property="member.id" column="mem_id" />
		<result property="order.id" column="order_id" />
		<result property="kakao.amount.total" column="pay_price" />
		<result property="order.payDate" column="pay_date" />
		<result property="kakao.payment_method_type" column="pay_type" />
		<result property="kakao.quantity" column="pay_quantity" />
		<result property="payState" column="pay_state" />
		
		<association property="member" column="mem_id" select="daangnmungcat.mapper.MemberMapper.selectMemberById" fetchType="lazy"/>
		<association property="order" column="order_id" select="getOrderByNo" fetchType="lazy"/>
	</resultMap>
	
	<resultMap type="Payment" id="payRes">
		<id property="id" column="id"></id>
		<result property="member.id" column="mem_id" />
		<result property="order.id" column="order_id" />
		<result property="payPrice" column="pay_price" />
		<result property="payType" column="pay_type" />
		<result property="quantity" column="pay_quantity" />
		<result property="payState" column="pay_state" />
		<result property="payDate" column="pay_date" />
		
		<association property="member" column="mem_id" select="daangnmungcat.mapper.MemberMapper.selectMemberById" fetchType="lazy"/>
		<association property="order" column="order_id" select="getOrderByNo" fetchType="lazy"/>
	</resultMap>
	
<!-- 내 주문내역에서만 씀 -->	
	<resultMap type="OrderDetail" id="sortRes">
		<id property="id" column="id"></id>
		<result property="orderId" column="order_id" />
		<result property="member.id" column="mem_id"></result>
		<result property="pdt.id" column="pdt_id" />
		<result property="quantity" column="quantity"/>
		<result property="pdt.price" column="price" />
		<result property="totalPrice" column="total_price" />
		<result property="partcnt" column="partcnt"/>
		<result property="orderState" column="ORDER_STATE" jdbcType="VARCHAR" typeHandler="daangnmungcat.dto.OrderState$TypeHandler"/>
		
		<association property="pdt" column="pdt_id" select="daangnmungcat.mapper.MallPdtMapper.getProductById" fetchType="lazy"></association>
		<association property="member" column="mem_id" select="daangnmungcat.mapper.MemberMapper.selectMemberById" fetchType="lazy"/>
	</resultMap>

	
	
<!-- sql -->
	
	<sql id="orderSql">
		SELECT ID, MEM_ID, MEM_NAME, MEM_EMAIL, MEM_PHONE, ADDRESS_NAME, 
			ZIPCODE, ADDRESS1, ADDRESS2, ADDRESS_PHONE1, ADDRESS_PHONE2, ADDRESS_MEMO, 
			TOTAL_PRICE, USED_MILEAGE, FINAL_PRICE, PLUS_MILEAGE, DELIVERY_PRICE, 
			SETTLE_CASE, TRACKING_NUMBER, SHIPPING_DATE, ADD_DELIVERY_PRICE, 
			PAY_ID, PAY_DATE, REGDATE, RETURN_PRICE, STATE, MISU, 
	</sql>
	<sql id="odSql">
		SELECT ID, ORDER_ID, MEM_ID, PDT_ID, QUANTITY, PRICE, TOTAL_PRICE, ORDER_STATE,
		COUNT(*)OVER(PARTITION BY ORDER_ID) AS PARTCNT
	</sql>
	<sql id="paymentSql">
		select ID, MEM_ID, ORDER_ID, PAY_PRICE, PAY_DATE, PAY_TYPE, PAY_QUANTITY, PAY_STATE
	</sql>
	
	
	
<!-- query -->
	<select id="getPaymentById" resultMap="kakaoRes">
		<include refid="paymentSql"></include>
		from mall_payment where id = #{id}
	</select>

	<select id="selectAccountPaymentByOrderId" resultMap="payRes" parameterType="String">
		<include refid="paymentSql"></include>
		FROM MALL_PAYMENT WHERE ORDER_ID = #{order.id}
	</select>
	
	<select id="selectOrderDetailByOrderNo" resultMap="sortRes" parameterType="String">
		<include refid="odSql"></include> 
		from mall_order_detail where order_id = #{orderId}
	</select>
	
	<select id="getOrderDetailById" resultMap="sortRes" parameterType="String">
		<include refid="odSql"></include> 
		from mall_order_detail where id = #{id}
	</select>
	

	<insert id="insertOrderDetail">
		<selectKey keyProperty="id" resultType="int" order="BEFORE">
			SELECT mall_order_detail_seq.nextval FROM DUAL
		</selectKey>
		INSERT INTO mall_order_detail(ID, MEM_ID, ORDER_ID, PDT_ID, QUANTITY, PRICE, TOTAL_PRICE, ORDER_STATE) 
		VALUES (#{id}, #{member.id}, #{orderId}, #{pdt.id}, #{quantity}, #{pdt.price}, #{totalPrice}, #{orderState.label})
		
	</insert>
	<insert id="insertOrder">
			insert into mall_order(ID, MEM_ID, MEM_NAME, MEM_EMAIL, MEM_PHONE, ADDRESS_NAME, 
				ZIPCODE, ADDRESS1, ADDRESS2, ADDRESS_PHONE1, ADDRESS_PHONE2, ADDRESS_MEMO, 
				TOTAL_PRICE, USED_MILEAGE, FINAL_PRICE, PLUS_MILEAGE, DELIVERY_PRICE, tracking_number, PAY_ID, pay_date, settle_case, state, misu)
			values (#{id}, #{member.id}, #{member.name}, #{member.email}, #{member.phone}, #{addName},
				#{zipcode}, #{address1}, #{address2}, #{addPhone1}, #{addPhone2}, #{addMemo}, 
				#{totalPrice}, #{usedMileage}, #{finalPrice}, #{plusMileage}, #{deliveryPrice}, #{trackingNumber}, 
				#{payId}, #{payDate},
				#{settleCase}, #{state}, #{misu} ) 
	</insert>
	
	<insert id="insertPayment">
		insert into mall_payment(ID, MEM_ID, ORDER_ID, PAY_PRICE, PAY_TYPE, PAY_QUANTITY)
		values (#{id}, #{member.id}, #{kakao.partner_order_id}, #{kakao.amount.total}, #{kakao.payment_method_type}, #{kakao.quantity})
	</insert>
	
	<insert id="insertAccountPayment">
		insert into mall_payment(ID, MEM_ID, ORDER_ID, PAY_PRICE, PAY_TYPE, PAY_QUANTITY, PAY_STATE, PAY_DATE)
		values (#{id}, #{member.id}, #{order.id}, #{payPrice}, #{payType}, #{quantity}, #{payState}, #{payDate})
	</insert>
	
	<select id="selectOrderById" resultMap="orderRes" parameterType="string">
		SELECT * FROM mall_order 
		where regdate BETWEEN TO_char(ADD_MONTHS(sysdate, -1),'yyyy-MM-dd') AND to_char(sysdate + 1, 'yyyy-MM-dd') 
		and mem_id = #{member.id} ORDER BY regdate desc
	</select>
	
	<select id="selectCancelOrderById" resultMap="orderRes" parameterType="string">
		SELECT * FROM mall_order 
		where regdate BETWEEN TO_char(ADD_MONTHS(sysdate, -1),'yyyy-MM-dd') AND to_char(sysdate + 1, 'yyyy-MM-dd') 
		and mem_id = #{member.id} and state = '환불완료' ORDER BY regdate desc
	</select>
	
	<select id="getOrderByNo" resultMap="orderRes">
		SELECT * FROM mall_order where id = #{id} ORDER BY regdate desc
	</select>

	<select id="sortingOrderDetail" resultMap="sortRes" parameterType="daangnmungcat.dto.Order">
		<include refid="odSql"></include>
		FROM mall_order_detail where order_id = #{orderId}
	</select>
	
	<select id="searchByDate" parameterType="String" resultMap="orderRes">
		<include refid="orderSql"></include>
		FROM mall_order 
		WHERE regdate BETWEEN to_date( #{dateFrom}, 'yyyy-MM-dd') 
								AND TO_date(#{dateTo}, 'yyyy-MM-dd')+1 
		and mem_id = #{mem_id} order by regdate desc
	</select>
	
	<select id="cancelSearchByDate" parameterType="String" resultMap="orderRes">
		<include refid="orderSql"></include>
		FROM mall_order 
		WHERE regdate BETWEEN to_date( #{dateFrom}, 'yyyy-MM-dd') 
								AND TO_date(#{dateTo}, 'yyyy-MM-dd')+1 
		and mem_id = #{mem_id} and state = '환불완료' order by regdate desc
	</select>
	
	<update id="updateAllOrderDetail">
		update mall_order_detail set 
		<if test="orderState != null"> order_state = #{orderState.label} </if>
		where order_id = #{orderId}
	</update>
	
	<update id="updatePartOrderDetail">
		update mall_order_detail set 
		<if test="orderState != null"> order_state = #{orderState.label} </if>
		where id = #{id}
	</update>
	
	<update id="updateOrder">
		update mall_order
		<set>
			<if test="addName != null"> address_name = #{addName}, </if>
			<if test="zipcode != null"> zipcode = #{zipcode}, </if>
			<if test="address1 != null"> address1 = #{address1}, </if>
			<if test="address2 != null"> address2 = #{address2}, </if>
			<if test="addPhone1 != null"> address_phone1 = #{addPhone1}, </if>
			<if test="addPhone2 != null"> address_phone2 = #{addPhone2}, </if>
			<if test="addMemo != null"> address_memo = #{addMemo}, </if>
			<if test="deliveryPrice != null"> delivery_price = #{deliveryPrice}, </if>
			<if test="trackingNumber != null"> tracking_number = #{trackingNumber}, </if>
			<if test="shippingDate != null"> shipping_date = #{shippingDate}, </if>
			<if test="addDeliveryPrice != null"> add_delivery_price = #{addDeliveryPrice}, </if>
			<if test="payId != null"> pay_id = #{payId}, </if>
			<if test="payDate != null"> pay_date = #{payDate}, </if>
			<if test="misu != null"> misu = #{misu}, </if>
			<if test="returnPrice != null"> return_price = #{returnPrice}, </if>
			<if test="state != null"> state = #{state}, </if>
			<if test="finalPrice != null"> final_price = #{finalPrice}, </if>
			<if test="totalPrice != null"> total_price = #{totalPrice} </if>
		</set>
		where id = #{id}
	</update>
	
	<update id="updatePayment">
		update mall_payment
		<set>
			<if test="member != null"> mem_id = #{member.id}, </if>
			<if test="order != null"> order_id = #{order.id}, </if>
			<if test="payPrice != null"> pay_price = #{payPrice}, </if>
			<if test="payType != null"> pay_type = #{payType}, </if>
			<if test="quantity != null"> pay_quantity = #{quantity}, </if>
			<if test="payState != null"> pay_state = #{payState}, </if>
			<if test="payDate != null"> pay_date = #{payDate}</if>
		</set>
		where id = #{id}
	</update>
	
	<select id="selectOrderDetailUsingPartCancelByOrderId" resultMap="sortRes" parameterType="string">
		<include refid="odSql"></include>
		from mall_order_detail WHERE ORDER_STATE = '결제' or order_state = '대기' 
			AND ORDER_ID = #{orderId} ORDER BY id DESC
	</select>
	
	
	
<!-- admin -->	
	
	<select id="selectOrderAll" resultMap="orderRes">
		SELECT A.*
		FROM (SELECT ROWNUM AS RNUM, B.*
			FROM (SELECT ID, MEM_ID, MEM_NAME, MEM_EMAIL, MEM_PHONE, ADDRESS_NAME, ZIPCODE,
				ADDRESS1, ADDRESS2, ADDRESS_PHONE1, ADDRESS_PHONE2, ADDRESS_MEMO, TOTAL_PRICE,
				USED_MILEAGE, FINAL_PRICE, PLUS_MILEAGE, DELIVERY_PRICE, tracking_number, 
				ADD_DELIVERY_PRICE, PAY_ID, PAY_DATE, REGDATE, RETURN_PRICE,
				STATE, shipping_date, settle_case, misu, COUNT(*)OVER(PARTITION BY MEM_ID) AS order_cnt FROM MALL_ORDER ORDER BY REGDATE desc )B)A
			WHERE A.RNUM BETWEEN  #{rowStart} AND  #{rowEnd}
				ORDER BY A.RNUM
	</select>
	
	<select id="listCount" resultType="int">
		SELECT count(a.id)
		FROM (SELECT ROWNUM AS RNUM, B.*
		FROM (SELECT ID, MEM_ID, MEM_NAME, MEM_EMAIL, MEM_PHONE, ADDRESS_NAME, ZIPCODE,
					ADDRESS1, ADDRESS2, ADDRESS_PHONE1, ADDRESS_PHONE2, ADDRESS_MEMO, TOTAL_PRICE,
					USED_MILEAGE, FINAL_PRICE, PLUS_MILEAGE, DELIVERY_PRICE, tracking_number, 
					ADD_DELIVERY_PRICE, PAY_ID, PAY_DATE, REGDATE, RETURN_PRICE,
					STATE, shipping_date, settle_case, misu, COUNT(*)OVER(PARTITION BY MEM_ID) AS order_cnt FROM MALL_ORDER )B)A
	</select>
	
	<select id="selectOrderBySearch" resultMap="orderRes" >
		SELECT A.*
			FROM (SELECT ROWNUM AS RNUM, B.*
				FROM (SELECT ID, MEM_ID, MEM_NAME, MEM_EMAIL, MEM_PHONE, ADDRESS_NAME, ZIPCODE,
					ADDRESS1, ADDRESS2, ADDRESS_PHONE1, ADDRESS_PHONE2, ADDRESS_MEMO, TOTAL_PRICE,
					USED_MILEAGE, FINAL_PRICE, PLUS_MILEAGE, DELIVERY_PRICE, tracking_number, 
					ADD_DELIVERY_PRICE, PAY_ID, PAY_DATE, REGDATE, RETURN_PRICE,
					STATE, shipping_date, settle_case, misu, COUNT(*)OVER(PARTITION BY MEM_ID) AS order_cnt 
					FROM MALL_ORDER
					<where>
						<if test="content != '' and content != null and word != '' and word != null">
							${content} like '%'|| #{word} ||'%'
						</if>
						<if test="stateStr != null and stateStr != ''">
							and state like '%'|| #{stateStr} ||'%' 
						</if>
						<if test="start != null and start != '' and end != null and end != '' ">
							and regdate BETWEEN to_date( #{start}, 'yyyy-MM-dd') 
								AND TO_date(#{end}, 'yyyy-MM-dd')+1 
						</if>
					</where> 
					ORDER BY regdate DESC )B)A
				WHERE A.RNUM BETWEEN #{cri.rowStart} AND #{cri.rowEnd} 
			ORDER BY A.RNUM
	</select>
	
	<select id="searchListCount" resultType="int">
		SELECT count(a.id)
			FROM (SELECT ROWNUM AS RNUM, B.*
			FROM (SELECT ID, MEM_ID, MEM_NAME, MEM_EMAIL, MEM_PHONE, ADDRESS_NAME, ZIPCODE,
				ADDRESS1, ADDRESS2, ADDRESS_PHONE1, ADDRESS_PHONE2, ADDRESS_MEMO, TOTAL_PRICE,
				USED_MILEAGE, FINAL_PRICE, PLUS_MILEAGE, DELIVERY_PRICE, tracking_number, 
				ADD_DELIVERY_PRICE, PAY_ID, PAY_DATE, REGDATE, RETURN_PRICE,
				STATE, shipping_date, settle_case, misu, COUNT(*)OVER(PARTITION BY MEM_ID) AS order_cnt 
			FROM MALL_ORDER 
				<where>
					<if test="content != '' and content != null and word != '' and word != null">
						${content} like '%'|| #{word} ||'%'
					</if>
					<if test="stateStr != null and stateStr != ''">
						and state like '%'|| #{stateStr} ||'%' 
					</if>
					<if test="start != null and start != '' and end != null and end != '' ">
						and regdate BETWEEN to_date( #{start}, 'yyyy-MM-dd') 
							AND TO_date(#{end}, 'yyyy-MM-dd')+1 
					</if>
				</where> 
			)B)A
	</select>
	
</mapper>