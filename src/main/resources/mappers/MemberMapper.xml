<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="daangnmungcat.mapper.MemberMapper">
<sql id="selectSql">
	SELECT
		m.id, pwd, m.name, nickname, email, phone, grade,
		DONGNE1 AS dongne1_id,
		d1.name AS dongne1_name,
		dongne2 AS dongne2_id,
		d2.name AS dongne2_name,
		profile_pic, profile_text, regdate, birthday,
		zipcode, address1, address2, use_yn, 
		NVL((SELECT sum(mileage) FROM mall_MILEAGE GROUP BY mem_id HAVING mem_id = m.id), 0) AS MILEAGE
	FROM MEMBER m
		LEFT OUTER JOIN dongne1 d1 ON (m.dongne1 = d1.id)
		LEFT OUTER JOIN dongne2 d2 ON (m.dongne2 = d2.ID)
</sql>

<sql id="whereSql">
	<where>
		<if test="id != null">
			m.id = #{id}
		</if>
	</where>
</sql>


<!-- ResultMap -->

	<resultMap type="Member" id="memberResult">
		<id column="id" property="id"></id>
		<result column="pwd" property="pwd"></result>
		<result column="name" property="name"></result>
		<result column="nickname" property="nickname"></result>
		<result column="email" property="email"></result>
		<result column="phone" property="phone"></result>
		<result column="profile_pic" property="profilePic"></result>
		<result column="profile_text" property="profileText"></result>
		<result column="regdate" property="regdate"></result>
		<result column="birthday" property="birthday"></result>
		<result column="zipcode" property="zipcode"></result>
		<result column="address1" property="address1"></result>
		<result column="address2" property="address2"></result>
		<result column="mileage" property="mileage"></result>
		<result column="use_yn" property="useYn"/>
		
		<association property="grade" column="grade" select="daangnmungcat.mapper.GradeMapper.selectGradeByCode" />
		<association property="dongne1" columnPrefix="dongne1_" resultMap="dongne1Result" />
		<association property="dongne2" columnPrefix="dongne2_" resultMap="dongne2Result" />
	</resultMap>
	
	<resultMap type="Dongne1" id="dongne1Result">
		<result column="id" property="id"></result>
		<result column="name" property="name"></result>
	</resultMap>
	
	<resultMap type="Dongne2" id="dongne2Result">
		<result column="id" property="id"></result>
		<result column="dongne1_id" property="dongne1.id"></result>
		<result column="name" property="name"></result>
	</resultMap>

<!-- login -->

	<select id="selectMemberByAll" resultMap="memberResult">
		<include refid="selectSql"></include>
	</select>
	
	<select id="selectMemberByConditionWithPaging" resultMap="memberResult">
		<include refid="selectSql"></include>
	</select>
	
	<select id="selectMemberById" resultMap="memberResult">
		<include refid="selectSql"></include>
		<include refid="whereSql"></include>
	</select>
	
	<select id="checkPwd" resultType="int" parameterType="String">
		SELECT 1 FROM MEMBER WHERE id = #{id} and pwd = #{pwd} AND USE_YN = 'y'
	</select>
	
<!-- sign up -->
	
	<select id="Dongne1List" resultMap="dongne1Result">
		SELECT id, name FROM DONGNE1 order by id
	</select>
	
	<select id="Dongne2List" parameterType="int" resultMap="dongne2Result">
		SELECT id, dongne1_id, name FROM DONGNE2 WHERE DONGNE1_ID = #{dongne1Id} order by id, dongne1_id
	</select>
	
	<select id="idCheck" resultType="int">
		SELECT count(*) FROM MEMBER WHERE id = #{id}
	</select>

	<select id="emailCheck" resultType="int">
		SELECT count(*) FROM MEMBER WHERE email = #{email}
	</select>
	
	<select id="phoneCheck" resultType="int">
		SELECT count(*) FROM MEMBER WHERE phone = #{phone}
	</select>
	
	<insert id="insertMember"  parameterType="Member">
		INSERT INTO MEMBER(id, pwd, name, NICKNAME, EMAIL, PHONE, DONGNE1, DONGNE2, PROFILE_PIC) 
		VALUES(#{id}, #{pwd}, #{name}, #{nickname}, #{email}, #{phone}, #{dongne1.id}, #{dongne2.id}, #{profilePic})
	</insert>
	
<!-- my page -->	
	<update id="deleteMember">
		update member set use_yn = 'n' where id = #{id}
	</update>
	
	<update id="updateProfilePic">
		UPDATE MEMBER SET PROFILE_PIC = #{profilePic} where id = #{id}
	</update>
	
	<update id="updateProfileText">
		UPDATE MEMBER SET PROFILE_TEXT = #{profileText} where id = #{id}
	</update>
	
	<update id="updatePhone">
		update member set phone = #{phone} where id = #{id}
	</update>
	
	<update id="updateInfo">
		update member set 
			name = #{name},
			nickname = #{nickname}, 
			email = #{email}, 
			phone = #{phone}, 
			birthday = #{birthday},
			dongne1 = #{dongne1.id}, 
			dongne2 = #{dongne2.id},
			zipcode = #{zipcode},
			address1 = #{address1},
			address2 = #{address2} 
		<include refid="whereSql"></include>
	</update>
	
	<update id="updatePwd">
		update member set pwd = #{pwd} where id = #{id}
	</update>
	
	<update id="dongneUpdate" parameterType="map">
		UPDATE MEMBER SET DONGNE1 = #{dongne1.id}, DONGNE2 = #{dongne2.id} WHERE ID = #{id}
	</update>
	
	
<!-- Dongne -->
	
	<resultMap type="Dongne2" id="dongneAllResult">
		<result column="dongne1_id" property="dongne1.id"></result>
		<result column="dongne1_name" property="dongne1.name"></result>
		<result column="dongne2_id" property="id"></result>
		<result column="dongne2_name" property="name"></result>
	</resultMap>
	
	<select id="selectDongneByDongne2" parameterType="Dongne2" resultMap="dongneAllResult">
		SELECT
			d1.id AS dongne1_id,
			d1.name AS dongne1_name,
			d2.id AS dongne2_id,
			d2.name AS dongne2_name
		FROM dongne1 d1
			LEFT OUTER JOIN dongne2 d2 ON (d1.ID = d2.dongne1_id)
		<where>
			<choose>
				<when test="id != null">
					d2.id = #{id}
				</when>
				<when test="name != null">
					d2.name = #{name}
				</when>
			</choose>
		</where>
	</select>
	
<!-- address -->

	<resultMap type="Address" id="addressResult">
		<result column="id" property="id"></result>
		<result column="mem_id" property="memId"></result>
		<result column="subject" property="subject"></result>
		<result column="name" property="name"/>
		<result column="phone" property="phone"/>
		<result column="zipcode" property="zipcode"/>
		<result column="address1" property="address1"/>
		<result column="address2" property="address2"/>
		<result column="memo" property="memo"/>
	</resultMap>
	
	<select id="selectAddressById" resultMap="addressResult">
		SELECT ID, MEM_ID, SUBJECT, NAME, PHONE, ZIPCODE, ADDRESS1, ADDRESS2, MEMO FROM ORDER_address 
		WHERE mem_id = #{memId}
	</select>
	
	<insert id="insertAddress" parameterType="Address">
		INSERT INTO order_address
		VALUES(ORDER_ADDRESS_seq.nextval, #{memId}, #{subject}, #{name}, #{phone}, #{zipcode}, #{address1}, #{address2}, #{memo})
	</insert>
	
	<update id="updateMyAddress">
		UPDATE MEMBER SET ZIPCODE = #{zipcode}, ADDRESS1 = #{address1}, ADDRESS2 = #{address2} where id = #{id}
	</update>
	
	<update id="updateAddress">
		update order_address set mem_id= #{memId}, subject = #{subject}, name = #{name}, phone = #{phone}, zipcode = #{zipcode}, address1 = #{address1}, address2 = #{address2}, memo = #{memo}
		where id = #{id}
	</update>
	
	<select id="getAddress" resultMap="addressResult" >
		select * from order_address where id = #{id} order by id
	</select>
	
	<delete id="deleteAddress">
		delete from order_address where id = #{id}
	</delete>
	
<!-- 	<select id="selectMileage" parameterType="String" resultType="int">
		SELECT sum(mm.mileage) AS mileage
		FROM MALL_MILEAGE mm
		GROUP BY mem_id
		having mem_id = #{id}
	</select> -->
	
	<!-- admin -->
	<sql id="whereSearchSql">
		<where>
			<if test="scri.searchType != null" > 
				<if test="scri.searchType eq 'id'">
					and m.id like '%' || #{scri.keyword} || '%'
				</if>
				<if test="scri.searchType eq 'nickname'">
					and nickname like '%' || #{scri.keyword} || '%'
				</if>
				<if test="scri.searchType eq 'name'">
					and m.name like '%' || #{scri.keyword} || '%'
				</if>
				<if test="scri.searchType eq 'email'">
					and email like '%' || #{scri.keyword} || '%'
			   	</if>        
				<if test="scri.searchType eq 'phone'">
					and phone like '%' || #{scri.keyword} || '%'
				</if>
			 </if>
			 <if test="member.grade != null">
			 	and grade = #{member.grade.code}
			 </if>
			 <if test="member.dongne1 != null">
			 	and dongne1 = #{member.dongne1.id}
			 </if>
			 <if test="member.dongne2 != null">
			 	and dongne2 = #{member.dongne2.id}
			 </if>
			 <if test="member.useYn != null and (member.useYn.equalsIgnoreCase('y') || member.useYn.equalsIgnoreCase('n'))">
			 	and use_yn = #{member.useYn}
			 </if>
			 <if test="scri.startDate != null and scri.startDate != '' and scri.endDate != null and scri.endDate != ''">
			 	and regdate between #{scri.startDate} and #{scri.endDate}
			 </if>
		 </where>
	</sql>
	
	<sql id="whereCountSql">
		<where>
			<if test="scri.searchType != null" > 
				<if test="scri.searchType eq 'id'">
					and m.id like '%' || #{scri.keyword} || '%'
				</if>
				<if test="scri.searchType eq 'nickname'">
					and nickname like '%' || #{scri.keyword} || '%'
				</if>
				<if test="scri.searchType eq 'name'">
					and m.name like '%' || #{scri.keyword} || '%'
				</if>
				<if test="scri.searchType eq 'email'">
					and email like '%' || #{scri.keyword} || '%'
			   	</if>        
				<if test="scri.searchType eq 'phone'">
					and phone like '%' || #{scri.keyword} || '%'
				</if>
			 </if>
			 <if test="member.grade != null">
			 	and grade = #{member.grade.code}
			 </if>
			 <if test="member.dongne1 != null">
			 	and dongne1 = #{member.dongne1.id}
			 </if>
			 <if test="member.dongne2 != null">
			 	and dongne2 = #{member.dongne2.id}
			 </if>
			 <if test="member.useYn != null and (member.useYn.equalsIgnoreCase('y') || member.useYn.equalsIgnoreCase('n'))">
			 	and use_yn = #{member.useYn}
			 </if>
			 <if test="scri.startDate != null and scri.startDate != '' and scri.endDate != null and scri.endDate != ''">
			 	and regdate between #{scri.startDate} and #{scri.endDate}
			 </if>
		 </where>
	</sql>
	
	<select id="selectMemberBySearch" resultMap="memberResult">
		SELECT *
		FROM (
			SELECT
				rownum AS rnum,
				m.id, pwd, m.name, nickname, email, phone, grade,
				DONGNE1 AS dongne1_id,
				d1.name AS dongne1_name,
				dongne2 AS dongne2_id,
				d2.name AS dongne2_name,
				profile_pic, profile_text, regdate, birthday,
				zipcode, address1, address2, use_yn, 
				NVL((SELECT sum(mileage) FROM mall_MILEAGE GROUP BY mem_id HAVING mem_id = m.id), 0) AS MILEAGE
			FROM MEMBER m
				LEFT OUTER JOIN dongne1 d1 ON (m.dongne1 = d1.id)
				LEFT OUTER JOIN dongne2 d2 ON (m.dongne2 = d2.ID)
			<include refid="whereSearchSql"/>
			<choose>
				<when test="scri.searchType != null and !scri.searchType.equals('') and scri.keyword != null and !scri.keyword.equals('')">
					ORDER BY m.${scri.searchType} ASC, regdate DESC
				</when>
				<otherwise>ORDER BY regdate DESC</otherwise>
			</choose>
		) a
		WHERE a.rnum BETWEEN #{scri.rowStart} AND #{scri.rowEnd}
		ORDER BY a.rnum
	</select>
	
	<select id="selectMemberCountBySearch" resultType="int">
		SELECT COUNT(*)
		FROM member m
		<include refid="whereSearchSql"/>
	</select>
	
</mapper>